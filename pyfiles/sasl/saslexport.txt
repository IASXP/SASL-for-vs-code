"logInfo(data, ...) ": { "prefix": "logInfo(data, ...) ", "body": [ "logInfo(data, ...) " ], "description": "WIP" },"logWarning(data, ...) ": { "prefix": "logWarning(data, ...) ", "body": [ "logWarning(data, ...) " ], "description": "WIP" },"logError(data, ...) ": { "prefix": "logError(data, ...) ", "body": [ "logError(data, ...) " ], "description": "WIP" },"logDebug(data, ...) ": { "prefix": "logDebug(data, ...) ", "body": [ "logDebug(data, ...) " ], "description": "WIP" },"logTrace(data, ...) ": { "prefix": "logTrace(data, ...) ", "body": [ "logTrace(data, ...) " ], "description": "WIP" },"getLogLevel() ": { "prefix": "getLogLevel() ", "body": [ "getLogLevel() " ], "description": "WIP" },"setLogLevel(level) ": { "prefix": "setLogLevel(level) ", "body": [ "setLogLevel(level) " ], "description": "WIP" },"getEnvVariable(name) ": { "prefix": "getEnvVariable(name) ", "body": [ "getEnvVariable(name) " ], "description": "WIP" },"setEnvVariable(name, value) ": { "prefix": "setEnvVariable(name, value) ", "body": [ "setEnvVariable(name, value) " ], "description": "WIP" },"unsetEnvVariable(name) ": { "prefix": "unsetEnvVariable(name) ", "body": [ "unsetEnvVariable(name) " ], "description": "WIP" },"getOS() ": { "prefix": "getOS() ", "body": [ "getOS() " ], "description": "WIP" },"getXPVersion() ": { "prefix": "getXPVersion() ", "body": [ "getXPVersion() " ], "description": "WIP" },"setClipboardText(text) ": { "prefix": "setClipboardText(text) ", "body": [ "setClipboardText(text) " ], "description": "WIP" },"getClipboardText() ": { "prefix": "getClipboardText() ", "body": [ "getClipboardText() " ], "description": "WIP" },"listFiles(path) ": { "prefix": "listFiles(path) ", "body": [ "listFiles(path) " ], "description": "WIP" },"setAircraftPanelRendering(isOn) ": { "prefix": "setAircraftPanelRendering(isOn) ", "body": [ "setAircraftPanelRendering(isOn) " ], "description": "WIP" },"set3DRendering(isOn) ": { "prefix": "set3DRendering(isOn) ", "body": [ "set3DRendering(isOn) " ], "description": "WIP" },"setInteractivity(isOn) ": { "prefix": "setInteractivity(isOn) ", "body": [ "setInteractivity(isOn) " ], "description": "WIP" },"setRenderingMode2D(ID) ": { "prefix": "setRenderingMode2D(ID) ", "body": [ "setRenderingMode2D(ID) " ], "description": "WIP" },"setPanelRenderingMode(ID) ": { "prefix": "setPanelRenderingMode(ID) ", "body": [ "setPanelRenderingMode(ID) " ], "description": "WIP" },"setLuaErrorsHandling(ID) ": { "prefix": "setLuaErrorsHandling(ID) ", "body": [ "setLuaErrorsHandling(ID) " ], "description": "WIP" },"getMonitorsIDsGlobal() ": { "prefix": "getMonitorsIDsGlobal() ", "body": [ "getMonitorsIDsGlobal() " ], "description": "WIP" },"getMonitorsIDsOS() ": { "prefix": "getMonitorsIDsOS() ", "body": [ "getMonitorsIDsOS() " ], "description": "WIP" },"getMonitorBoundsGlobal(id) ": { "prefix": "getMonitorBoundsGlobal(id) ", "body": [ "getMonitorBoundsGlobal(id) " ], "description": "WIP" },"getMonitorBoundsOS(id) ": { "prefix": "getMonitorBoundsOS(id) ", "body": [ "getMonitorBoundsOS(id) " ], "description": "WIP" },"getScreenBoundsGlobal() ": { "prefix": "getScreenBoundsGlobal() ", "body": [ "getScreenBoundsGlobal() " ], "description": "WIP" },"findCommand(name) ": { "prefix": "findCommand(name) ", "body": [ "findCommand(name) " ], "description": "WIP" },"commandBegin(commandID) ": { "prefix": "commandBegin(commandID) ", "body": [ "commandBegin(commandID) " ], "description": "WIP" },"commandEnd(commandID) ": { "prefix": "commandEnd(commandID) ", "body": [ "commandEnd(commandID) " ], "description": "WIP" },"createCommand(name, description) ": { "prefix": "createCommand(name, description) ", "body": [ "createCommand(name, description) " ], "description": "WIP" },"registerCommandHandler(commandID, isBefore, handle) ": { "prefix": "registerCommandHandler(commandID, isBefore, handle) ", "body": [ "registerCommandHandler(commandID, isBefore, handle) " ], "description": "WIP" },"unregisterCommandHandler(commandID, isBefore) ": { "prefix": "unregisterCommandHandler(commandID, isBefore) ", "body": [ "unregisterCommandHandler(commandID, isBefore) " ], "description": "WIP" },"appendMenuItem(inMenuID, name, callback) ": { "prefix": "appendMenuItem(inMenuID, name, callback) ", "body": [ "appendMenuItem(inMenuID, name, callback) " ], "description": "WIP" },"appendMenuItemWithCommand(inMenuID, name, command) ": { "prefix": "appendMenuItemWithCommand(inMenuID, name, command) ", "body": [ "appendMenuItemWithCommand(inMenuID, name, command) " ], "description": "WIP" },"removeMenuItem(inMenuID, inMenuItemID) ": { "prefix": "removeMenuItem(inMenuID, inMenuItemID) ", "body": [ "removeMenuItem(inMenuID, inMenuItemID) " ], "description": "WIP" },"setMenuItemName(inMenuID, inMenuItemID, name) ": { "prefix": "setMenuItemName(inMenuID, inMenuItemID, name) ", "body": [ "setMenuItemName(inMenuID, inMenuItemID, name) " ], "description": "WIP" },"setMenuItemState(inMenuID, inMenuItemID, inState) ": { "prefix": "setMenuItemState(inMenuID, inMenuItemID, inState) ", "body": [ "setMenuItemState(inMenuID, inMenuItemID, inState) " ], "description": "WIP" },"getMenuItemState(inMenuID, inMenuItemID) ": { "prefix": "getMenuItemState(inMenuID, inMenuItemID) ", "body": [ "getMenuItemState(inMenuID, inMenuItemID) " ], "description": "WIP" },"enableMenuItem(inMenuID, inMenuItemID, isEnable) ": { "prefix": "enableMenuItem(inMenuID, inMenuItemID, isEnable) ", "body": [ "enableMenuItem(inMenuID, inMenuItemID, isEnable) " ], "description": "WIP" },"createMenu(name, parentMenuID, parentMenuItemID) ": { "prefix": "createMenu(name, parentMenuID, parentMenuItemID) ", "body": [ "createMenu(name, parentMenuID, parentMenuItemID) " ], "description": "WIP" },"appendMenuSeparator(inMenuID) ": { "prefix": "appendMenuSeparator(inMenuID) ", "body": [ "appendMenuSeparator(inMenuID) " ], "description": "WIP" },"clearAllMenuItems(inMenuID) ": { "prefix": "clearAllMenuItems(inMenuID) ", "body": [ "clearAllMenuItems(inMenuID) " ], "description": "WIP" },"destroyMenu(inMenuID) ": { "prefix": "destroyMenu(inMenuID) ", "body": [ "destroyMenu(inMenuID) " ], "description": "WIP" },"messageWindow(x, y, width, height, title, message, buttonsCount, ...) ": { "prefix": "messageWindow(x, y, width, height, title, message, buttonsCount, ...) ", "body": [ "messageWindow(x, y, width, height, title, message, buttonsCount, ...) " ], "description": "WIP" },"getCamera() ": { "prefix": "getCamera() ", "body": [ "getCamera() " ], "description": "WIP" },"setCamera(x, y, z, pitch, yaw, roll, zoom) ": { "prefix": "setCamera(x, y, z, pitch, yaw, roll, zoom) ", "body": [ "setCamera(x, y, z, pitch, yaw, roll, zoom) " ], "description": "WIP" },"registerCameraController(callback) ": { "prefix": "registerCameraController(callback) ", "body": [ "registerCameraController(callback) " ], "description": "WIP" },"unregisterCameraController(id) ": { "prefix": "unregisterCameraController(id) ", "body": [ "unregisterCameraController(id) " ], "description": "WIP" },"getCurrentCameraStatus() ": { "prefix": "getCurrentCameraStatus() ", "body": [ "getCurrentCameraStatus() " ], "description": "WIP" },"startCameraControl(id, status) ": { "prefix": "startCameraControl(id, status) ", "body": [ "startCameraControl(id, status) " ], "description": "WIP" },"stopCameraControl() ": { "prefix": "stopCameraControl() ", "body": [ "stopCameraControl() " ], "description": "WIP" },"downloadFileSync(url, path) ": { "prefix": "downloadFileSync(url, path) ", "body": [ "downloadFileSync(url, path) " ], "description": "WIP" },"downloadFileAsync(url, path, callback) ": { "prefix": "downloadFileAsync(url, path, callback) ", "body": [ "downloadFileAsync(url, path, callback) " ], "description": "WIP" },"downloadFileContentsSync(url) ": { "prefix": "downloadFileContentsSync(url) ", "body": [ "downloadFileContentsSync(url) " ], "description": "WIP" },"downloadFileAsync(url, path, callback) ": { "prefix": "downloadFileAsync(url, path, callback) ", "body": [ "downloadFileAsync(url, path, callback) " ], "description": "WIP" },"setDownloadTimeout(type, time, speed) ": { "prefix": "setDownloadTimeout(type, time, speed) ", "body": [ "setDownloadTimeout(type, time, speed) " ], "description": "WIP" },"createTimer() ": { "prefix": "createTimer() ", "body": [ "createTimer() " ], "description": "WIP" },"createPerformanceTimer() ": { "prefix": "createPerformanceTimer() ", "body": [ "createPerformanceTimer() " ], "description": "WIP" },"deleteTimer(id) ": { "prefix": "deleteTimer(id) ", "body": [ "deleteTimer(id) " ], "description": "WIP" },"startTimer(id) ": { "prefix": "startTimer(id) ", "body": [ "startTimer(id) " ], "description": "WIP" },"pauseTimer(id) ": { "prefix": "pauseTimer(id) ", "body": [ "pauseTimer(id) " ], "description": "WIP" },"resumeTimer(id) ": { "prefix": "resumeTimer(id) ", "body": [ "resumeTimer(id) " ], "description": "WIP" },"stopTimer(id) ": { "prefix": "stopTimer(id) ", "body": [ "stopTimer(id) " ], "description": "WIP" },"resetTimer(id) ": { "prefix": "resetTimer(id) ", "body": [ "resetTimer(id) " ], "description": "WIP" },"getElapsedSeconds(id) ": { "prefix": "getElapsedSeconds(id) ", "body": [ "getElapsedSeconds(id) " ], "description": "WIP" },"getElapsedMicroseconds(id) ": { "prefix": "getElapsedMicroseconds(id) ", "body": [ "getElapsedMicroseconds(id) " ], "description": "WIP" },"getCurrentCycle() ": { "prefix": "getCurrentCycle() ", "body": [ "getCurrentCycle() " ], "description": "WIP" },"getMyPluginID() ": { "prefix": "getMyPluginID() ", "body": [ "getMyPluginID() " ], "description": "WIP" },"getMyPluginPath() ": { "prefix": "getMyPluginPath() ", "body": [ "getMyPluginPath() " ], "description": "WIP" },"getXPlanePath() ": { "prefix": "getXPlanePath() ", "body": [ "getXPlanePath() " ], "description": "WIP" },"getProjectPath() ": { "prefix": "getProjectPath() ", "body": [ "getProjectPath() " ], "description": "WIP" },"getProjectName() ": { "prefix": "getProjectName() ", "body": [ "getProjectName() " ], "description": "WIP" },"getAircraftPath() ": { "prefix": "getAircraftPath() ", "body": [ "getAircraftPath() " ], "description": "WIP" },"getAircraft() ": { "prefix": "getAircraft() ", "body": [ "getAircraft() " ], "description": "WIP" },"countPlugins() ": { "prefix": "countPlugins() ", "body": [ "countPlugins() " ], "description": "WIP" },"getNthPlugin(index) ": { "prefix": "getNthPlugin(index) ", "body": [ "getNthPlugin(index) " ], "description": "WIP" },"findPluginByPath(path) ": { "prefix": "findPluginByPath(path) ", "body": [ "findPluginByPath(path) " ], "description": "WIP" },"findPluginBySignature(signature) ": { "prefix": "findPluginBySignature(signature) ", "body": [ "findPluginBySignature(signature) " ], "description": "WIP" },"getPluginInfo(id) ": { "prefix": "getPluginInfo(id) ", "body": [ "getPluginInfo(id) " ], "description": "WIP" },"isPluginEnabled(id) ": { "prefix": "isPluginEnabled(id) ", "body": [ "isPluginEnabled(id) " ], "description": "WIP" },"enablePlugin(id) ": { "prefix": "enablePlugin(id) ", "body": [ "enablePlugin(id) " ], "description": "WIP" },"disablePlugin(id) ": { "prefix": "disablePlugin(id) ", "body": [ "disablePlugin(id) " ], "description": "WIP" },"reloadPlugins() ": { "prefix": "reloadPlugins() ", "body": [ "reloadPlugins() " ], "description": "WIP" },"registerMessageHandler(messageID, type, callback) ": { "prefix": "registerMessageHandler(messageID, type, callback) ", "body": [ "registerMessageHandler(messageID, type, callback) " ], "description": "WIP" },"unregisterMessageHandler(messageID) ": { "prefix": "unregisterMessageHandler(messageID) ", "body": [ "unregisterMessageHandler(messageID) " ], "description": "WIP" },"sendMessageToPlugin(id, messageID, type) ": { "prefix": "sendMessageToPlugin(id, messageID, type) ", "body": [ "sendMessageToPlugin(id, messageID, type) " ], "description": "WIP" },"setAuxiliaryClickSystem(isActive) ": { "prefix": "setAuxiliaryClickSystem(isActive) ", "body": [ "setAuxiliaryClickSystem(isActive) " ], "description": "WIP" },"setCSDClickInterval(interval) ": { "prefix": "setCSDClickInterval(interval) ", "body": [ "setCSDClickInterval(interval) " ], "description": "WIP" },"getCSDClickInterval() ": { "prefix": "getCSDClickInterval() ", "body": [ "getCSDClickInterval() " ], "description": "WIP" },"setCSMode(mode) ": { "prefix": "setCSMode(mode) ", "body": [ "setCSMode(mode) " ], "description": "WIP" },"getCSMode() ": { "prefix": "getCSMode() ", "body": [ "getCSMode() " ], "description": "WIP" },"setCSShowCursor(cursorID) ": { "prefix": "setCSShowCursor(cursorID) ", "body": [ "setCSShowCursor(cursorID) " ], "description": "WIP" },"getCSShowCursor() ": { "prefix": "getCSShowCursor() ", "body": [ "getCSShowCursor() " ], "description": "WIP" },"setCSWheelInteractionDelay(delay) ": { "prefix": "setCSWheelInteractionDelay(delay) ", "body": [ "setCSWheelInteractionDelay(delay) " ], "description": "WIP" },"getCSWheelInteractionDelay() ": { "prefix": "getCSWheelInteractionDelay() ", "body": [ "getCSWheelInteractionDelay() " ], "description": "WIP" },"setCSPassWheelEventFlag(flag) ": { "prefix": "setCSPassWheelEventFlag(flag) ", "body": [ "setCSPassWheelEventFlag(flag) " ], "description": "WIP" },"setCSCursorScale(scale) ": { "prefix": "setCSCursorScale(scale) ", "body": [ "setCSCursorScale(scale) " ], "description": "WIP" },"getCSClickDown(buttonID) ": { "prefix": "getCSClickDown(buttonID) ", "body": [ "getCSClickDown(buttonID) " ], "description": "WIP" },"getCSClickUp(buttonID) ": { "prefix": "getCSClickUp(buttonID) ", "body": [ "getCSClickUp(buttonID) " ], "description": "WIP" },"getCSClickHold(buttonID) ": { "prefix": "getCSClickHold(buttonID) ", "body": [ "getCSClickHold(buttonID) " ], "description": "WIP" },"getCSDoubleClick(buttonID) ": { "prefix": "getCSDoubleClick(buttonID) ", "body": [ "getCSDoubleClick(buttonID) " ], "description": "WIP" },"getCSWheelClicks() ": { "prefix": "getCSWheelClicks() ", "body": [ "getCSWheelClicks() " ], "description": "WIP" },"getCSMouseXPos() ": { "prefix": "getCSMouseXPos() ", "body": [ "getCSMouseXPos() " ], "description": "WIP" },"getCSMouseYPos() ": { "prefix": "getCSMouseYPos() ", "body": [ "getCSMouseYPos() " ], "description": "WIP" },"getCSDragDirection() ": { "prefix": "getCSDragDirection() ", "body": [ "getCSDragDirection() " ], "description": "WIP" },"getCSDragValue() ": { "prefix": "getCSDragValue() ", "body": [ "getCSDragValue() " ], "description": "WIP" },"getCSCursorOnInterface() ": { "prefix": "getCSCursorOnInterface() ", "body": [ "getCSCursorOnInterface() " ], "description": "WIP" },"getCSMouseIsOnPanel() ": { "prefix": "getCSMouseIsOnPanel() ", "body": [ "getCSMouseIsOnPanel() " ], "description": "WIP" },"getCSPanelMousePos() ": { "prefix": "getCSPanelMousePos() ", "body": [ "getCSPanelMousePos() " ], "description": "WIP" },"registerGlobalKeyHandler(callback) ": { "prefix": "registerGlobalKeyHandler(callback) ", "body": [ "registerGlobalKeyHandler(callback) " ], "description": "WIP" },"unregisterGlobalKeyHandler(id) ": { "prefix": "unregisterGlobalKeyHandler(id) ", "body": [ "unregisterGlobalKeyHandler(id) " ], "description": "WIP" },"registerHotKey(key, shiftDown, ctrlDown, altOptDown, description, callback) ": { "prefix": "registerHotKey(key, shiftDown, ctrlDown, altOptDown, description, callback) ", "body": [ "registerHotKey(key, shiftDown, ctrlDown, altOptDown, description, callback) " ], "description": "WIP" },"unregisterHotKey(id) ": { "prefix": "unregisterHotKey(id) ", "body": [ "unregisterHotKey(id) " ], "description": "WIP" },"setHotKeyCombination(id, key, shiftDown, ctrlDown, altOptDown) ": { "prefix": "setHotKeyCombination(id, key, shiftDown, ctrlDown, altOptDown) ", "body": [ "setHotKeyCombination(id, key, shiftDown, ctrlDown, altOptDown) " ], "description": "WIP" },"getFirstNavAid() ": { "prefix": "getFirstNavAid() ", "body": [ "getFirstNavAid() " ], "description": "WIP" },"getNextNavAid(id) ": { "prefix": "getNextNavAid(id) ", "body": [ "getNextNavAid(id) " ], "description": "WIP" },"findFirstNavAidOfType(type) ": { "prefix": "findFirstNavAidOfType(type) ", "body": [ "findFirstNavAidOfType(type) " ], "description": "WIP" },"findLastNavAidOfType(type) ": { "prefix": "findLastNavAidOfType(type) ", "body": [ "findLastNavAidOfType(type) " ], "description": "WIP" },"findNavAid(fragmentName, fragmentID, latitude, longitude, frequency, type) ": { "prefix": "findNavAid(fragmentName, fragmentID, latitude, longitude, frequency, type) ", "body": [ "findNavAid(fragmentName, fragmentID, latitude, longitude, frequency, type) " ], "description": "WIP" },"getNavAidInfo(id) ": { "prefix": "getNavAidInfo(id) ", "body": [ "getNavAidInfo(id) " ], "description": "WIP" },"countFMSEntries() ": { "prefix": "countFMSEntries() ", "body": [ "countFMSEntries() " ], "description": "WIP" },"getDisplayedFMSEntry() ": { "prefix": "getDisplayedFMSEntry() ", "body": [ "getDisplayedFMSEntry() " ], "description": "WIP" },"getDestinationFMSEntry() ": { "prefix": "getDestinationFMSEntry() ", "body": [ "getDestinationFMSEntry() " ], "description": "WIP" },"setDisplayedFMSEntry(index) ": { "prefix": "setDisplayedFMSEntry(index) ", "body": [ "setDisplayedFMSEntry(index) " ], "description": "WIP" },"setDestinationFMSEntry(index) ": { "prefix": "setDestinationFMSEntry(index) ", "body": [ "setDestinationFMSEntry(index) " ], "description": "WIP" },"getFMSEntryInfo(index) ": { "prefix": "getFMSEntryInfo(index) ", "body": [ "getFMSEntryInfo(index) " ], "description": "WIP" },"setFMSEntryInfo(index, id, altitude) ": { "prefix": "setFMSEntryInfo(index, id, altitude) ", "body": [ "setFMSEntryInfo(index, id, altitude) " ], "description": "WIP" },"setFMSEntryLatLon(index, latitude, longitude, altitude) ": { "prefix": "setFMSEntryLatLon(index, latitude, longitude, altitude) ", "body": [ "setFMSEntryLatLon(index, latitude, longitude, altitude) " ], "description": "WIP" },"clearFMSEntry() ": { "prefix": "clearFMSEntry() ", "body": [ "clearFMSEntry() " ], "description": "WIP" },"getGPSDestinationType() ": { "prefix": "getGPSDestinationType() ", "body": [ "getGPSDestinationType() " ], "description": "WIP" },"getGPSDestination() ": { "prefix": "getGPSDestination() ", "body": [ "getGPSDestination() " ], "description": "WIP" },"drawObject(id, x, y, z, pitch, heading, roll, lighting, earthRelative) ": { "prefix": "drawObject(id, x, y, z, pitch, heading, roll, lighting, earthRelative) ", "body": [ "drawObject(id, x, y, z, pitch, heading, roll, lighting, earthRelative) " ], "description": "WIP" },"reloadScenery() ": { "prefix": "reloadScenery() ", "body": [ "reloadScenery() " ], "description": "WIP" },"worldToLocal(latitude, longitude, altitude) ": { "prefix": "worldToLocal(latitude, longitude, altitude) ", "body": [ "worldToLocal(latitude, longitude, altitude) " ], "description": "WIP" },"localToWorld(x, y, z) ": { "prefix": "localToWorld(x, y, z) ", "body": [ "localToWorld(x, y, z) " ], "description": "WIP" },"modelToLocal(u, v, w) ": { "prefix": "modelToLocal(u, v, w) ", "body": [ "modelToLocal(u, v, w) " ], "description": "WIP" },"localToModel(x, y, z) ": { "prefix": "localToModel(x, y, z) ", "body": [ "localToModel(x, y, z) " ], "description": "WIP" },"probeTerrain(x, y, z) ": { "prefix": "probeTerrain(x, y, z) ", "body": [ "probeTerrain(x, y, z) " ], "description": "WIP" },"getMagneticVariation(latitude, longitude) ": { "prefix": "getMagneticVariation(latitude, longitude) ", "body": [ "getMagneticVariation(latitude, longitude) " ], "description": "WIP" },"degMagneticToDegTrue(heading) ": { "prefix": "degMagneticToDegTrue(heading) ", "body": [ "degMagneticToDegTrue(heading) " ], "description": "WIP" },"createInstance(objectId) ": { "prefix": "createInstance(objectId) ", "body": [ "createInstance(objectId) " ], "description": "WIP" },"destroyInstance(instanceId) ": { "prefix": "destroyInstance(instanceId) ", "body": [ "destroyInstance(instanceId) " ], "description": "WIP" },"setInstancePosition(instanceId, x, y, z, pitch, heading, roll, data) ": { "prefix": "setInstancePosition(instanceId, x, y, z, pitch, heading, roll, data) ", "body": [ "setInstancePosition(instanceId, x, y, z, pitch, heading, roll, data) " ], "description": "WIP" },"drawLine(x1, y1, x2, y2, color) ": { "prefix": "drawLine(x1, y1, x2, y2, color) ", "body": [ "drawLine(x1, y1, x2, y2, color) " ], "description": "WIP" },"drawWideLine(x1, y1, x2, y2, thickness, color) ": { "prefix": "drawWideLine(x1, y1, x2, y2, thickness, color) ", "body": [ "drawWideLine(x1, y1, x2, y2, thickness, color) " ], "description": "WIP" },"drawPolyLine(points, color) ": { "prefix": "drawPolyLine(points, color) ", "body": [ "drawPolyLine(points, color) " ], "description": "WIP" },"drawWidePolyLine(points, thickness, color) ": { "prefix": "drawWidePolyLine(points, thickness, color) ", "body": [ "drawWidePolyLine(points, thickness, color) " ], "description": "WIP" },"drawTriangle(x1, y1, x2, y2, x3, y3, color) ": { "prefix": "drawTriangle(x1, y1, x2, y2, x3, y3, color) ", "body": [ "drawTriangle(x1, y1, x2, y2, x3, y3, color) " ], "description": "WIP" },"drawRectangle(x, y, width, height, color) ": { "prefix": "drawRectangle(x, y, width, height, color) ", "body": [ "drawRectangle(x, y, width, height, color) " ], "description": "WIP" },"drawFrame(x, y, width, height, color) ": { "prefix": "drawFrame(x, y, width, height, color) ", "body": [ "drawFrame(x, y, width, height, color) " ], "description": "WIP" },"setLinePattern(pattern) ": { "prefix": "setLinePattern(pattern) ", "body": [ "setLinePattern(pattern) " ], "description": "WIP" },"drawLinePattern(x1, y1, x2, y2, savePatternState, color) ": { "prefix": "drawLinePattern(x1, y1, x2, y2, savePatternState, color) ", "body": [ "drawLinePattern(x1, y1, x2, y2, savePatternState, color) " ], "description": "WIP" },"drawPolyLinePattern(points, color) ": { "prefix": "drawPolyLinePattern(points, color) ", "body": [ "drawPolyLinePattern(points, color) " ], "description": "WIP" },"drawBezierLineQ(x1, y1, x2, y2, x3, y3, parts, color) ": { "prefix": "drawBezierLineQ(x1, y1, x2, y2, x3, y3, parts, color) ", "body": [ "drawBezierLineQ(x1, y1, x2, y2, x3, y3, parts, color) " ], "description": "WIP" },"drawWideBezierLineQ(x1, y1, x2, y2, x3, y3, parts, thickness, color) ": { "prefix": "drawWideBezierLineQ(x1, y1, x2, y2, x3, y3, parts, thickness, color) ", "body": [ "drawWideBezierLineQ(x1, y1, x2, y2, x3, y3, parts, thickness, color) " ], "description": "WIP" },"drawBezierLineQAdaptive(x1, y1, x2, y2, x3, y3, color) ": { "prefix": "drawBezierLineQAdaptive(x1, y1, x2, y2, x3, y3, color) ", "body": [ "drawBezierLineQAdaptive(x1, y1, x2, y2, x3, y3, color) " ], "description": "WIP" },"drawWideBezierLineQAdaptive(x1, y1, x2, y2, x3, y3, thickness, color) ": { "prefix": "drawWideBezierLineQAdaptive(x1, y1, x2, y2, x3, y3, thickness, color) ", "body": [ "drawWideBezierLineQAdaptive(x1, y1, x2, y2, x3, y3, thickness, color) " ], "description": "WIP" },"drawBezierLineC(x1, y1, x2, y2, x3, y3, x4, y4, parts, color) ": { "prefix": "drawBezierLineC(x1, y1, x2, y2, x3, y3, x4, y4, parts, color) ", "body": [ "drawBezierLineC(x1, y1, x2, y2, x3, y3, x4, y4, parts, color) " ], "description": "WIP" },"drawWideBezierLineC(x1, y1, x2, y2, x3, y3, x4, y4, parts, thickness, color) ": { "prefix": "drawWideBezierLineC(x1, y1, x2, y2, x3, y3, x4, y4, parts, thickness, color) ", "body": [ "drawWideBezierLineC(x1, y1, x2, y2, x3, y3, x4, y4, parts, thickness, color) " ], "description": "WIP" },"drawBezierLineCAdaptive(x1, y1, x2, y2, x3, y3, x4, y4, color) ": { "prefix": "drawBezierLineCAdaptive(x1, y1, x2, y2, x3, y3, x4, y4, color) ", "body": [ "drawBezierLineCAdaptive(x1, y1, x2, y2, x3, y3, x4, y4, color) " ], "description": "WIP" },"drawWideBezierLineCAdaptive(x1, y1, x2, y2, x3, y3, x4, y4, thickness, color) ": { "prefix": "drawWideBezierLineCAdaptive(x1, y1, x2, y2, x3, y3, x4, y4, thickness, color) ", "body": [ "drawWideBezierLineCAdaptive(x1, y1, x2, y2, x3, y3, x4, y4, thickness, color) " ], "description": "WIP" },"drawCircle(x, y, radius, isFilled, color) ": { "prefix": "drawCircle(x, y, radius, isFilled, color) ", "body": [ "drawCircle(x, y, radius, isFilled, color) " ], "description": "WIP" },"drawArc(x, y, radiusInner, radiusOuter, startAngle, arcAngle, color) ": { "prefix": "drawArc(x, y, radiusInner, radiusOuter, startAngle, arcAngle, color) ", "body": [ "drawArc(x, y, radiusInner, radiusOuter, startAngle, arcAngle, color) " ], "description": "WIP" },"drawArcLine(x, y, radius, startAngle, arcAngle, color) ": { "prefix": "drawArcLine(x, y, radius, startAngle, arcAngle, color) ", "body": [ "drawArcLine(x, y, radius, startAngle, arcAngle, color) " ], "description": "WIP" },"drawConvexPolygon(points, isFilled, thickness, color) ": { "prefix": "drawConvexPolygon(points, isFilled, thickness, color) ", "body": [ "drawConvexPolygon(points, isFilled, thickness, color) " ], "description": "WIP" },"drawConvexPolygon(points, isFilled, thickness, color) ": { "prefix": "drawConvexPolygon(points, isFilled, thickness, color) ", "body": [ "drawConvexPolygon(points, isFilled, thickness, color) " ], "description": "WIP" },"setPolygonExtrudeMode(mode) ": { "prefix": "setPolygonExtrudeMode(mode) ", "body": [ "setPolygonExtrudeMode(mode) " ], "description": "WIP" },"setWideLineExtrudeMode(mode) ": { "prefix": "setWideLineExtrudeMode(mode) ", "body": [ "setWideLineExtrudeMode(mode) " ], "description": "WIP" },"setInternalLineWidth(width) ": { "prefix": "setInternalLineWidth(width) ", "body": [ "setInternalLineWidth(width) " ], "description": "WIP" },"setInternalLineStipple(enabled) ": { "prefix": "setInternalLineStipple(enabled) ", "body": [ "setInternalLineStipple(enabled) " ], "description": "WIP" },"saveInternalLineState() ": { "prefix": "saveInternalLineState() ", "body": [ "saveInternalLineState() " ], "description": "WIP" },"restoreInternalLineState() ": { "prefix": "restoreInternalLineState() ", "body": [ "restoreInternalLineState() " ], "description": "WIP" },"drawTexture(id, x, y, width, height, color) ": { "prefix": "drawTexture(id, x, y, width, height, color) ", "body": [ "drawTexture(id, x, y, width, height, color) " ], "description": "WIP" },"drawRotatedTexture(id, angle, x, y, width, height, color) ": { "prefix": "drawRotatedTexture(id, angle, x, y, width, height, color) ", "body": [ "drawRotatedTexture(id, angle, x, y, width, height, color) " ], "description": "WIP" },"drawRotatedTextureCenter(id, angle, rx, ry, x, y, width, height, color) ": { "prefix": "drawRotatedTextureCenter(id, angle, rx, ry, x, y, width, height, color) ", "body": [ "drawRotatedTextureCenter(id, angle, rx, ry, x, y, width, height, color) " ], "description": "WIP" },"drawTexturePart(id, x, y, width, height, tx, ty, twidth, theight, color) ": { "prefix": "drawTexturePart(id, x, y, width, height, tx, ty, twidth, theight, color) ", "body": [ "drawTexturePart(id, x, y, width, height, tx, ty, twidth, theight, color) " ], "description": "WIP" },"drawRotatedTexturePart(id, angle, x, y, width, height, tx, ty, twidth, theight, color) ": { "prefix": "drawRotatedTexturePart(id, angle, x, y, width, height, tx, ty, twidth, theight, color) ", "body": [ "drawRotatedTexturePart(id, angle, x, y, width, height, tx, ty, twidth, theight, color) " ], "description": "WIP" },"drawRotatedTexturePartCenter(id, angle, rx, ry, x, y, width, height, tx, ty, twidth, theight, color) ": { "prefix": "drawRotatedTexturePartCenter(id, angle, rx, ry, x, y, width, height, tx, ty, twidth, theight, color) ", "body": [ "drawRotatedTexturePartCenter(id, angle, rx, ry, x, y, width, height, tx, ty, twidth, theight, color) " ], "description": "WIP" },"drawTextureCoords(id, x1, y1, x2, y2, x3, y3, x4, y4, color) ": { "prefix": "drawTextureCoords(id, x1, y1, x2, y2, x3, y3, x4, y4, color) ", "body": [ "drawTextureCoords(id, x1, y1, x2, y2, x3, y3, x4, y4, color) " ], "description": "WIP" },"drawTextureWithRotatedCoords(id, angle, x, y, width, height, tx, ty, twidth, theight) ": { "prefix": "drawTextureWithRotatedCoords(id, angle, x, y, width, height, tx, ty, twidth, theight) ", "body": [ "drawTextureWithRotatedCoords(id, angle, x, y, width, height, tx, ty, twidth, theight) " ], "description": "WIP" },"getTextureSize(id) ": { "prefix": "getTextureSize(id) ", "body": [ "getTextureSize(id) " ], "description": "WIP" },"getTextureSourceSize(id) ": { "prefix": "getTextureSourceSize(id) ", "body": [ "getTextureSourceSize(id) " ], "description": "WIP" },"setTextureWrapping(id, mode) ": { "prefix": "setTextureWrapping(id, mode) ", "body": [ "setTextureWrapping(id, mode) " ], "description": "WIP" },"importTexture(inSpecID) ": { "prefix": "importTexture(inSpecID) ", "body": [ "importTexture(inSpecID) " ], "description": "WIP" },"recreateTexture(id, width, height, saveContents) ": { "prefix": "recreateTexture(id, width, height, saveContents) ", "body": [ "recreateTexture(id, width, height, saveContents) " ], "description": "WIP" },"setRenderTarget(id, isNeedClear, inAALevel) ": { "prefix": "setRenderTarget(id, isNeedClear, inAALevel) ", "body": [ "setRenderTarget(id, isNeedClear, inAALevel) " ], "description": "WIP" },"clearRenderTarget(x, y, width, height) ": { "prefix": "clearRenderTarget(x, y, width, height) ", "body": [ "clearRenderTarget(x, y, width, height) " ], "description": "WIP" },"restoreRenderTarget() ": { "prefix": "restoreRenderTarget() ", "body": [ "restoreRenderTarget() " ], "description": "WIP" },"createRenderTarget(width, height) ": { "prefix": "createRenderTarget(width, height) ", "body": [ "createRenderTarget(width, height) " ], "description": "WIP" },"destroyRenderTarget(id) ": { "prefix": "destroyRenderTarget(id) ", "body": [ "destroyRenderTarget(id) " ], "description": "WIP" },"createTexture(width, height) ": { "prefix": "createTexture(width, height) ", "body": [ "createTexture(width, height) " ], "description": "WIP" },"getTargetTextureData(id, x, y, width, height) ": { "prefix": "getTargetTextureData(id, x, y, width, height) ", "body": [ "getTargetTextureData(id, x, y, width, height) " ], "description": "WIP" },"createTextureDataStorage(width, height) ": { "prefix": "createTextureDataStorage(width, height) ", "body": [ "createTextureDataStorage(width, height) " ], "description": "WIP" },"deleteTextureDataStorage(id) ": { "prefix": "deleteTextureDataStorage(id) ", "body": [ "deleteTextureDataStorage(id) " ], "description": "WIP" },"getTextureDataPointer(id) ": { "prefix": "getTextureDataPointer(id) ", "body": [ "getTextureDataPointer(id) " ], "description": "WIP" },"getRawTextureData(textID, storageID) ": { "prefix": "getRawTextureData(textID, storageID) ", "body": [ "getRawTextureData(textID, storageID) " ], "description": "WIP" },"setRawTextureData(textID, storageID) ": { "prefix": "setRawTextureData(textID, storageID) ", "body": [ "setRawTextureData(textID, storageID) " ], "description": "WIP" },"imageFromTexture(filename, textID) ": { "prefix": "imageFromTexture(filename, textID) ", "body": [ "imageFromTexture(filename, textID) " ], "description": "WIP" },"drawBitmapText(id, x, y, text, alignment, color) ": { "prefix": "drawBitmapText(id, x, y, text, alignment, color) ", "body": [ "drawBitmapText(id, x, y, text, alignment, color) " ], "description": "WIP" },"drawRotatedBitmapText(id, cx, cy, angle, x, y, text, alignment, color) ": { "prefix": "drawRotatedBitmapText(id, cx, cy, angle, x, y, text, alignment, color) ", "body": [ "drawRotatedBitmapText(id, cx, cy, angle, x, y, text, alignment, color) " ], "description": "WIP" },"measureBitmapText(id, text) ": { "prefix": "measureBitmapText(id, text) ", "body": [ "measureBitmapText(id, text) " ], "description": "WIP" },"measureBitmapTextGlyphs(id, text) ": { "prefix": "measureBitmapTextGlyphs(id, text) ", "body": [ "measureBitmapTextGlyphs(id, text) " ], "description": "WIP" },"setFontOutlineThickness(id, outlineThickness) ": { "prefix": "setFontOutlineThickness(id, outlineThickness) ", "body": [ "setFontOutlineThickness(id, outlineThickness) " ], "description": "WIP" },"setFontOutlineColor(id, color) ": { "prefix": "setFontOutlineColor(id, color) ", "body": [ "setFontOutlineColor(id, color) " ], "description": "WIP" },"setFontRenderMode(id, mode, value) ": { "prefix": "setFontRenderMode(id, mode, value) ", "body": [ "setFontRenderMode(id, mode, value) " ], "description": "WIP" },"setFontRenderMode(id, mode, value) ": { "prefix": "setFontRenderMode(id, mode, value) ", "body": [ "setFontRenderMode(id, mode, value) " ], "description": "WIP" },"setFontSize(id, size) ": { "prefix": "setFontSize(id, size) ", "body": [ "setFontSize(id, size) " ], "description": "WIP" },"setFontDirection(id, mode) ": { "prefix": "setFontDirection(id, mode) ", "body": [ "setFontDirection(id, mode) " ], "description": "WIP" },"setFontBold(id, isBold) ": { "prefix": "setFontBold(id, isBold) ", "body": [ "setFontBold(id, isBold) " ], "description": "WIP" },"setFontItalic(id, isItalic) ": { "prefix": "setFontItalic(id, isItalic) ", "body": [ "setFontItalic(id, isItalic) " ], "description": "WIP" },"setFontBckMode(id, mode) ": { "prefix": "setFontBckMode(id, mode) ", "body": [ "setFontBckMode(id, mode) " ], "description": "WIP" },"setFontBckColor(id, color) ": { "prefix": "setFontBckColor(id, color) ", "body": [ "setFontBckColor(id, color) " ], "description": "WIP" },"setFontBckPadding(id, left, top, right, bottom) ": { "prefix": "setFontBckPadding(id, left, top, right, bottom) ", "body": [ "setFontBckPadding(id, left, top, right, bottom) " ], "description": "WIP" },"setFontGlyphSpacingFactor(id, factor) ": { "prefix": "setFontGlyphSpacingFactor(id, factor) ", "body": [ "setFontGlyphSpacingFactor(id, factor) " ], "description": "WIP" },"setFontUnicode(id, unicode) ": { "prefix": "setFontUnicode(id, unicode) ", "body": [ "setFontUnicode(id, unicode) " ], "description": "WIP" },"saveFontState(id) ": { "prefix": "saveFontState(id) ", "body": [ "saveFontState(id) " ], "description": "WIP" },"restoreFontState(id) ": { "prefix": "restoreFontState(id) ", "body": [ "restoreFontState(id) " ], "description": "WIP" },"setRenderTextPixelAligned(enabled) ": { "prefix": "setRenderTextPixelAligned(enabled) ", "body": [ "setRenderTextPixelAligned(enabled) " ], "description": "WIP" },"drawText(id, x, y, text, size, isBold, isItalic, alignment, color) ": { "prefix": "drawText(id, x, y, text, size, isBold, isItalic, alignment, color) ", "body": [ "drawText(id, x, y, text, size, isBold, isItalic, alignment, color) " ], "description": "WIP" },"drawTextI(id, x, y, text, alignment, color) ": { "prefix": "drawTextI(id, x, y, text, alignment, color) ", "body": [ "drawTextI(id, x, y, text, alignment, color) " ], "description": "WIP" },"drawRotatedText(id, x, y, cx, cy, angle, text, size, isBold, isItalic, alignment, color) ": { "prefix": "drawRotatedText(id, x, y, cx, cy, angle, text, size, isBold, isItalic, alignment, color) ", "body": [ "drawRotatedText(id, x, y, cx, cy, angle, text, size, isBold, isItalic, alignment, color) " ], "description": "WIP" },"drawRotatedTextI(id, x, y, cx, cy, angle, text, alignment, color) ": { "prefix": "drawRotatedTextI(id, x, y, cx, cy, angle, text, alignment, color) ", "body": [ "drawRotatedTextI(id, x, y, cx, cy, angle, text, alignment, color) " ], "description": "WIP" },"measureText(id, text, size, isBold, isItalic) ": { "prefix": "measureText(id, text, size, isBold, isItalic) ", "body": [ "measureText(id, text, size, isBold, isItalic) " ], "description": "WIP" },"measureTextGlyphs(id, text, size, isBold) ": { "prefix": "measureTextGlyphs(id, text, size, isBold) ", "body": [ "measureTextGlyphs(id, text, size, isBold) " ], "description": "WIP" },"measureTextI(id, text) ": { "prefix": "measureTextI(id, text) ", "body": [ "measureTextI(id, text) " ], "description": "WIP" },"measureTextGlyphsI(id, text) ": { "prefix": "measureTextGlyphsI(id, text) ", "body": [ "measureTextGlyphsI(id, text) " ], "description": "WIP" },"createShaderProgram() ": { "prefix": "createShaderProgram() ", "body": [ "createShaderProgram() " ], "description": "WIP" },"deleteShaderProgram(id) ": { "prefix": "deleteShaderProgram(id) ", "body": [ "deleteShaderProgram(id) " ], "description": "WIP" },"linkShaderProgram(id) ": { "prefix": "linkShaderProgram(id) ", "body": [ "linkShaderProgram(id) " ], "description": "WIP" },"setShaderUniform(shaderID, name, TYPE_SAMPLER, textureID, textureUnit) ": { "prefix": "setShaderUniform(shaderID, name, TYPE_SAMPLER, textureID, textureUnit) ", "body": [ "setShaderUniform(shaderID, name, TYPE_SAMPLER, textureID, textureUnit) " ], "description": "WIP" },"useShaderProgram(id) ": { "prefix": "useShaderProgram(id) ", "body": [ "useShaderProgram(id) " ], "description": "WIP" },"stopShaderProgram() ": { "prefix": "stopShaderProgram() ", "body": [ "stopShaderProgram() " ], "description": "WIP" },"setBlendFunction(sourceBlend, destBlend) ": { "prefix": "setBlendFunction(sourceBlend, destBlend) ", "body": [ "setBlendFunction(sourceBlend, destBlend) " ], "description": "WIP" },"setBlendFunctionSeparate(sourceBlendRGB, destBlendRGB, sourceBlendAlpha, destBlendAlpha) ": { "prefix": "setBlendFunctionSeparate(sourceBlendRGB, destBlendRGB, sourceBlendAlpha, destBlendAlpha) ", "body": [ "setBlendFunctionSeparate(sourceBlendRGB, destBlendRGB, sourceBlendAlpha, destBlendAlpha) " ], "description": "WIP" },"setBlendEquation(id) ": { "prefix": "setBlendEquation(id) ", "body": [ "setBlendEquation(id) " ], "description": "WIP" },"setBlendEquationSeparate(equationIDRGB, equationIDAlpha) ": { "prefix": "setBlendEquationSeparate(equationIDRGB, equationIDAlpha) ", "body": [ "setBlendEquationSeparate(equationIDRGB, equationIDAlpha) " ], "description": "WIP" },"setBlendColor(color) ": { "prefix": "setBlendColor(color) ", "body": [ "setBlendColor(color) " ], "description": "WIP" },"resetBlending() ": { "prefix": "resetBlending() ", "body": [ "resetBlending() " ], "description": "WIP" },"setClipArea(x, y, width, height) ": { "prefix": "setClipArea(x, y, width, height) ", "body": [ "setClipArea(x, y, width, height) " ], "description": "WIP" },"resetClipArea() ": { "prefix": "resetClipArea() ", "body": [ "resetClipArea() " ], "description": "WIP" },"drawMaskStart() ": { "prefix": "drawMaskStart() ", "body": [ "drawMaskStart() " ], "description": "WIP" },"drawUnderMask(invertMaskLogic) ": { "prefix": "drawUnderMask(invertMaskLogic) ", "body": [ "drawUnderMask(invertMaskLogic) " ], "description": "WIP" },"drawMaskEnd() ": { "prefix": "drawMaskEnd() ", "body": [ "drawMaskEnd() " ], "description": "WIP" },"saveGraphicsContext() ": { "prefix": "saveGraphicsContext() ", "body": [ "saveGraphicsContext() " ], "description": "WIP" },"restoreGraphicsContext() ": { "prefix": "restoreGraphicsContext() ", "body": [ "restoreGraphicsContext() " ], "description": "WIP" },"setTranslateTransform(x, y) ": { "prefix": "setTranslateTransform(x, y) ", "body": [ "setTranslateTransform(x, y) " ], "description": "WIP" },"setRotateTransform(angle) ": { "prefix": "setRotateTransform(angle) ", "body": [ "setRotateTransform(angle) " ], "description": "WIP" },"setScaleTransform(scaleX, scaleY) ": { "prefix": "setScaleTransform(scaleX, scaleY) ", "body": [ "setScaleTransform(scaleX, scaleY) " ], "description": "WIP" },"isLitStage() ": { "prefix": "isLitStage() ", "body": [ "isLitStage() " ], "description": "WIP" },"isNonLitStage() ": { "prefix": "isNonLitStage() ", "body": [ "isNonLitStage() " ], "description": "WIP" },"isPanelBeforeStage() ": { "prefix": "isPanelBeforeStage() ", "body": [ "isPanelBeforeStage() " ], "description": "WIP" },"isPanelAfterStage() ": { "prefix": "isPanelAfterStage() ", "body": [ "isPanelAfterStage() " ], "description": "WIP" },"drawLine3D(x1, y1, z1, x2, y2, z2, color) ": { "prefix": "drawLine3D(x1, y1, z1, x2, y2, z2, color) ", "body": [ "drawLine3D(x1, y1, z1, x2, y2, z2, color) " ], "description": "WIP" },"drawTriangle3D(x1, y1, z1, x2, y2, z2, x3, y3, z3, color) ": { "prefix": "drawTriangle3D(x1, y1, z1, x2, y2, z2, x3, y3, z3, color) ", "body": [ "drawTriangle3D(x1, y1, z1, x2, y2, z2, x3, y3, z3, color) " ], "description": "WIP" },"drawCircle3D(x, y, z, radius, pitch, yaw, isFilled, color) ": { "prefix": "drawCircle3D(x, y, z, radius, pitch, yaw, isFilled, color) ", "body": [ "drawCircle3D(x, y, z, radius, pitch, yaw, isFilled, color) " ], "description": "WIP" },"drawAngle3D(x, y, z, angle, length, rays, pitch, yaw, color) ": { "prefix": "drawAngle3D(x, y, z, angle, length, rays, pitch, yaw, color) ", "body": [ "drawAngle3D(x, y, z, angle, length, rays, pitch, yaw, color) " ], "description": "WIP" },"drawStandingCone3D(x, y, z, radius, height, color) ": { "prefix": "drawStandingCone3D(x, y, z, radius, height, color) ", "body": [ "drawStandingCone3D(x, y, z, radius, height, color) " ], "description": "WIP" },"saveGraphicsState3D() ": { "prefix": "saveGraphicsState3D() ", "body": [ "saveGraphicsState3D() " ], "description": "WIP" },"restoreGraphicsContext3D() ": { "prefix": "restoreGraphicsContext3D() ", "body": [ "restoreGraphicsContext3D() " ], "description": "WIP" },"setTranslateTransform3D(x, y, z) ": { "prefix": "setTranslateTransform3D(x, y, z) ", "body": [ "setTranslateTransform3D(x, y, z) " ], "description": "WIP" },"setRotateTransformX3D(angle) ": { "prefix": "setRotateTransformX3D(angle) ", "body": [ "setRotateTransformX3D(angle) " ], "description": "WIP" },"setRotateTransformY3D(angle) ": { "prefix": "setRotateTransformY3D(angle) ", "body": [ "setRotateTransformY3D(angle) " ], "description": "WIP" },"setRotateTransform3D(angle, x, y, z) ": { "prefix": "setRotateTransform3D(angle, x, y, z) ", "body": [ "setRotateTransform3D(angle, x, y, z) " ], "description": "WIP" },"setScaleTransform3D(x, y, z) ": { "prefix": "setScaleTransform3D(x, y, z) ", "body": [ "setScaleTransform3D(x, y, z) " ], "description": "WIP" },"loadSample(fileName, isNeedTimer, isNeedReversed) ": { "prefix": "loadSample(fileName, isNeedTimer, isNeedReversed) ", "body": [ "loadSample(fileName, isNeedTimer, isNeedReversed) " ], "description": "WIP" },"unloadSample(id) ": { "prefix": "unloadSample(id) ", "body": [ "unloadSample(id) " ], "description": "WIP" },"playSample(id, isLooping) ": { "prefix": "playSample(id, isLooping) ", "body": [ "playSample(id, isLooping) " ], "description": "WIP" },"stopSample(id) ": { "prefix": "stopSample(id) ", "body": [ "stopSample(id) " ], "description": "WIP" },"pauseSample(id) ": { "prefix": "pauseSample(id) ", "body": [ "pauseSample(id) " ], "description": "WIP" },"rewindSample(id) ": { "prefix": "rewindSample(id) ", "body": [ "rewindSample(id) " ], "description": "WIP" },"isSamplePlaying(id) ": { "prefix": "isSamplePlaying(id) ", "body": [ "isSamplePlaying(id) " ], "description": "WIP" },"getSamplePlayingRemaining(id) ": { "prefix": "getSamplePlayingRemaining(id) ", "body": [ "getSamplePlayingRemaining(id) " ], "description": "WIP" },"setSampleGain(id, gain) ": { "prefix": "setSampleGain(id, gain) ", "body": [ "setSampleGain(id, gain) " ], "description": "WIP" },"setMasterGain(gain) ": { "prefix": "setMasterGain(gain) ", "body": [ "setMasterGain(gain) " ], "description": "WIP" },"setMinimumSampleGain(id, minGain) ": { "prefix": "setMinimumSampleGain(id, minGain) ", "body": [ "setMinimumSampleGain(id, minGain) " ], "description": "WIP" },"setMaximumSampleGain(id, maxGain) ": { "prefix": "setMaximumSampleGain(id, maxGain) ", "body": [ "setMaximumSampleGain(id, maxGain) " ], "description": "WIP" },"setSamplePitch(id, pitch) ": { "prefix": "setSamplePitch(id, pitch) ", "body": [ "setSamplePitch(id, pitch) " ], "description": "WIP" },"setSampleOffset(id, offset) ": { "prefix": "setSampleOffset(id, offset) ", "body": [ "setSampleOffset(id, offset) " ], "description": "WIP" },"getSampleOffset(id) ": { "prefix": "getSampleOffset(id) ", "body": [ "getSampleOffset(id) " ], "description": "WIP" },"getSampleDuration(id) ": { "prefix": "getSampleDuration(id) ", "body": [ "getSampleDuration(id) " ], "description": "WIP" },"setSamplePosition(id, x, y, z) ": { "prefix": "setSamplePosition(id, x, y, z) ", "body": [ "setSamplePosition(id, x, y, z) " ], "description": "WIP" },"getSamplePosition(id) ": { "prefix": "getSamplePosition(id) ", "body": [ "getSamplePosition(id) " ], "description": "WIP" },"setSampleDirection(id, x, y, z) ": { "prefix": "setSampleDirection(id, x, y, z) ", "body": [ "setSampleDirection(id, x, y, z) " ], "description": "WIP" },"getSampleDirection(id) ": { "prefix": "getSampleDirection(id) ", "body": [ "getSampleDirection(id) " ], "description": "WIP" },"setSampleVelocity(id, x, y, z) ": { "prefix": "setSampleVelocity(id, x, y, z) ", "body": [ "setSampleVelocity(id, x, y, z) " ], "description": "WIP" },"getSampleVelocity(id) ": { "prefix": "getSampleVelocity(id) ", "body": [ "getSampleVelocity(id) " ], "description": "WIP" },"setSampleCone(id, outerGain, innerAngle, outerAngle) ": { "prefix": "setSampleCone(id, outerGain, innerAngle, outerAngle) ", "body": [ "setSampleCone(id, outerGain, innerAngle, outerAngle) " ], "description": "WIP" },"getSampleCone(id) ": { "prefix": "getSampleCone(id) ", "body": [ "getSampleCone(id) " ], "description": "WIP" },"setSampleEnv(id, env) ": { "prefix": "setSampleEnv(id, env) ", "body": [ "setSampleEnv(id, env) " ], "description": "WIP" },"getSampleEnv(id) ": { "prefix": "getSampleEnv(id) ", "body": [ "getSampleEnv(id) " ], "description": "WIP" },"setSampleRelative(id, isRelative) ": { "prefix": "setSampleRelative(id, isRelative) ", "body": [ "setSampleRelative(id, isRelative) " ], "description": "WIP" },"getSampleRelative(id) ": { "prefix": "getSampleRelative(id) ", "body": [ "getSampleRelative(id) " ], "description": "WIP" },"setSampleMaxDistance(id, distance) ": { "prefix": "setSampleMaxDistance(id, distance) ", "body": [ "setSampleMaxDistance(id, distance) " ], "description": "WIP" },"setSampleRolloffFactor(id, factor) ": { "prefix": "setSampleRolloffFactor(id, factor) ", "body": [ "setSampleRolloffFactor(id, factor) " ], "description": "WIP" },"setSampleRefDistance(id, distance) ": { "prefix": "setSampleRefDistance(id, distance) ", "body": [ "setSampleRefDistance(id, distance) " ], "description": "WIP" },"defineProperty(name, inValue) end": { "prefix": "defineProperty(name, inValue) end", "body": [ "defineProperty(name, inValue) end" ], "description": "WIP" },"startProcessSync(path, args, toStdIn, stdOutToString, stdErrToString) end": { "prefix": "startProcessSync(path, args, toStdIn, stdOutToString, stdErrToString) end", "body": [ "startProcessSync(path, args, toStdIn, stdOutToString, stdErrToString) end" ], "description": "WIP" },"startProcessAsync(path, args, toStdIn, stdOutToString, stdErrToString, callback) end": { "prefix": "startProcessAsync(path, args, toStdIn, stdOutToString, stdErrToString, callback) end", "body": [ "startProcessAsync(path, args, toStdIn, stdOutToString, stdErrToString, callback) end" ], "description": "WIP" },"readConfig(pathToFile, format) end": { "prefix": "readConfig(pathToFile, format) end", "body": [ "readConfig(pathToFile, format) end" ], "description": "WIP" },"writeConfig(pathToFile, format, t) end": { "prefix": "writeConfig(pathToFile, format, t) end", "body": [ "writeConfig(pathToFile, format, t) end" ], "description": "WIP" },